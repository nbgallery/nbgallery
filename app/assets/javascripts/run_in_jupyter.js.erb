// yes, we want everything credentialed because we live in PKI-land
$.ajaxSetup({ xhrFields: { withCredentials: true } });

$(document).ready(function() {
  <%
  interfaces = {}
  GalleryConfig.run_in_jupyter.interfaces.each do | interface |
    interfaces[interface['key']]={'name': interface['name'],'url':interface['url']}
  end
  %>
  <%="var jupyter_interfaces=" + interfaces.to_json%>

  $(document).on('click','#environmentSelectedFormSubmit', function(e) {
    e.preventDefault();
    var environment = $("input[name='selectedEnvironment']:checked").val();
    var temp = environment.split('--');
    var url = temp[0];
    var user_interface = temp[1];
    get_notebook(url, $('#runInJupyterId').val(), $('#runInJupyterType').val(), $('#runInJupyterRef').val(), user_interface);
    $('#runInJupyterModal').modal('hide');
  });

  $(document).on('click','#runInJupyterOverwriteSubmit', function(e) {
    e.preventDefault();
    var name =  $('#runInJupyterName').val();
    var url =  $('#runInJupyterUrl').val();
    var notebook = $('#runInJupyterNotebook').val();
    var user_interface =  $('#runInJupyterUserInterface').val();
    send(name,url,notebook,user_interface);
    $('#runInJupyterOverwrite').modal('hide');
  });

  $(document).on('click','.run_jupyter', function() {
    loadingGif();
    //Set the notebook id which we'll use later
    var id = $(this).attr('href');
    if(id.indexOf("notebook")>=0){
      id = id.substr(id.lastIndexOf("/")+1);
      var type = 'notebook';
    }
    else{
      var type = 'change_request';
      change_id = id.match(/change_requests\/(.{35,40})\/download/)[1];
      id = $('#notebook_id').val();
    }

    //Set the ref value to determine the order of the notebook that was clicked - we'll use this later too.
    var ref = ''
    if(type=='notebook'){
      ref = $(this).next().val();
      ref = ref.replace('?','&');
    }
    $('#runInJupyterId').val(id);
    $('#runInJupyterType').val(type);
    $('#runInJupyterRef').val(ref);

    $.ajax({
      url: '/environments',
      headers: {
        Accept: 'application/json'
      },
      error: function(response) {
        console.log(response);
        setTimeout(function() {
          makeAlert('error', '', JSON.parse(response.responseText)["message"]);
        },500)
      },
      success: function(response) {
        if (response.length == '1'){
          var url = response[0].url;
          var user_interface = response[0].user_interface
          get_notebook(url,id,type,ref,user_interface);
        }
        else if (response.length > '1'){
          $('#jupyterEnvironments > tbody tr').remove();
          for(var i=0; i<response.length; i++){
            $('#jupyterEnvironments > tbody').append('<tr><td><input type="radio" aria-label="Select ' + response[i].name + ' environment" name="selectedEnvironment" value="' + response[i].url + '--' + response[i].user_interface + '" />&nbsp;</td><td>' + response[i].name + '</td><td>' + response[i].url + '</td></tr>')
          }
          $('#runInJupyterModal').modal('show');
        }
        else {
          $('#runInJupyterNoInstanceModal').modal('show');
        }
      }
    });
  return false;
  });

  var get_notebook = function(url,id,type,ref,user_interface){
    if(url == undefined) {
      $('#runInJupyterNoInstanceModal').modal('show');
    } else {
      if (url[url.length - 1] != '/') {
        url = url.trim() + '/';
      }
      $.get('/notebooks/' + id + '/metadata', function(metadata) {
        if(type == 'notebook'){
          $.get('/notebooks/' + id + '/download?run=true' + ref, function(notebook) {
            var name = (metadata['title'] + '.ipynb').replace(/\//g,'∕');
            check_for_existence(name,url,notebook,user_interface);
          });
        }
        else{
          $.get('/change_requests/' + change_id + '/download?run=true', function(notebook) {
            var name = (metadata['title'] + ' (Change Request: ' + change_id.substr(0,7) + ') .ipynb').replace(/\//g,'∕');

            check_for_existence(name,url,notebook,user_interface);

          });
        }
      });
    }
  }

  var check_for_existence = function(name,url,notebook,user_interface) {
    $.ajax({
      method: 'GET',
      url: url + 'api/contents/' + encodeURIComponent(name),
      cache: false,
      success: function(response) {
        console.log(response);
        $('#runInJupyterNotebook').val(notebook);
        $('#runInJupyterUrl').val(url);
        $('#runInJupyterName').val(name);
        $('#runInJupyterUserInterface').val(user_interface);
        //Avoid double padding by waiting for "run" dialog to full fade-out first
        setTimeout(function () {$('#runInJupyterOverwrite').modal('show');},700);
      },
      error: function(response){
        console.log(response);
        send(name,url,notebook,user_interface);
      }
    });
  };

  var send = function(name,url,notebook,user_interface) {
    // this SHOULD be a PUT to api/contents/NotebookName.ipynb, but since FireFox won't
    // PKI-enable an OPTIONS request, and an OPTIONS request is necessary on PUTs, we
    // have a server-side extension that proxies the PUT through a POST.
    $.ajax({
      url: url + 'post/' + encodeURIComponent(name),
      type: 'POST',
      success: function() {
        console.log("User Interface " + user_interface);
        if (jupyter_interfaces[user_interface]){
          interface_url = jupyter_interfaces[user_interface]['url'];
        }else{
          interface_url = jupyter_interfaces['<%=GalleryConfig.run_in_jupyter.default_interface%>']['url'];
        }
        window.open(url + interface_url + encodeURIComponent(name), '_blank');
      },
      error: function(response) {
        makeAlert("error", "", "Could not send notebook to " + url + ". <%=GalleryConfig.run_in_jupyter.run_failed_message.gsub("\\","\\\\").gsub('"', '\"') unless GalleryConfig.run_in_jupyter.run_failed_message.nil? %>");
      },
      data: JSON.stringify({
        type: 'notebook',
        content: JSON.parse(notebook)
      })
    });
  };
});
