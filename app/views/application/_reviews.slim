-revisions_found = false
-num_types = 0
-num_types += 1 if GalleryConfig.reviews.technical.enabled
-num_types += 1 if GalleryConfig.reviews.functional.enabled
-num_types += 1 if GalleryConfig.reviews.compliance.enabled
-sorted_array = reviews.sort {|a,b| b.updated_at <=> a.updated_at }
-sorted_array.each do |review|
  -if review.revision_id != nil
    -revisions_found = true
    -break
-if !GalleryConfig.reviews_enabled
  div.center
    p Reviews not enabled
-elsif num_types == 0
  div.center
    p No types of reviews enabled
-elsif reviews.empty?
  div.center
    p No reviews
-elsif request.path != reviews_path
  table.clean-table.review-table.responsive
    caption.sr-only Reviews for Notebook
    thead
      tr
        th Notebook
        -if revisions_found
          th Revision
        th Review Type
        th Status
        th Reviewer
        th Time
        th Update Comment
    tbody
      -sorted_array = reviews.sort {|a,b| b.updated_at <=> a.updated_at }
      -sorted_array.each do |review|
        -if !review.notebook.public? && !(@user.admin? || @user.can_edit?(review.notebook))
          -next
        -else
          tr
            td
              -if !review.notebook.public? && (@user.admin? || @user.can_edit?(review.notebook))
                ==image_tag("Lock.png", class: "tagLogoLock tooltips show-inline", title: "This notebook is private", aria: {"hidden": true}, style:"display: none", tabindex: "0")
                span.sr-only
                  ' Private Notebook
              ==link_to_notebook(review.notebook)
            -if revisions_found
              td
                -if review.revision_id != nil
                  -if review.recent?
                    | Current
                  -else
                    ==render partial: 'link', locals: { revision: review.revision }
            td ==GalleryConfig.reviews[review.revtype].label
            td ==link_to(review.status, review_path(review))
            td ==link_to_user(review.reviewer) if review.reviewer
            td data-sort="#{review.updated_at}" ==render partial: "time_ago", locals: {time: review.updated_at}
            -if review.comments.to_s[0..22] == "Automatically nominated"
              td Automatically nominated
            -elsif review.comments == nil || review.comments.length < 2
              td.tooltips.none-cell
                span aria-hidden="true" #{"("}
                | none
                span aria-hidden="true" #{")"}
            -elsif review.comments.length > 100
              td.tooltips tabindex="0" title="#{review.comments}"
                span.show aria-hidden="true" style="display: none" ==truncate(review.comments, length: 100)
                span.sr-only ==review.comments
            -else
              td
                span ==review.comments

-else
  table.clean-table.review-table.responsive id="allReviewsTable"
    caption.sr-only All Reviews
    thead
      tr
        th rowspan="2" Notebook
        -if revisions_found
          th.revisions-column rowspan="2" Revision
        th colspan="#{num_types}" Review
        th rowspan="2" Last Updated
        th rowspan="2" Last Update Comment
      tr
        -if GalleryConfig.reviews.technical.enabled
          th style="min-width: unset" ==GalleryConfig.reviews.technical.label.capitalize
        -if GalleryConfig.reviews.functional.enabled
          th style="min-width: unset" ==GalleryConfig.reviews.functional.label.capitalize
        -if GalleryConfig.reviews.compliance.enabled
          th style="min-width: unset" ==GalleryConfig.reviews.compliance.label.capitalize
    tbody
      -if GalleryConfig.notebook_title_parse.parsing_enabled
        -sorted_array = reviews.order(:created_at).sort {|a,b| a.notebook.title.partition(GalleryConfig.notebook_title_parse.after_character)[2].downcase <=> b.notebook.title.partition(GalleryConfig.notebook_title_parse.after_character)[2].downcase }
      -else
        -sorted_array = reviews.order(:created_at).sort {|a,b| a.notebook.title.downcase <=> b.notebook.title.downcase }
      -indexed_array = []
      -sorted_array.length.times { indexed_array.push(false) }
      -sorted_array.each_with_index do |row, index|
        -if !row.notebook.public? && !(@user.admin? || @user.can_edit?(row.notebook))
          -indexed_array[index] = true
          -next
        -elsif indexed_array[index] || (row.revtype != "technical" && row.revtype != "functional")
          -next
        -else
          tr
            td data-sort="#{render partial: GalleryConfig.slim.table_notebook_title_text_only, locals: { notebook: row.notebook }}"
              ==render partial: GalleryConfig.slim.table_row_heading_label, locals: { notebook: row.notebook }
              -if !row.notebook.public? && (@user.admin? || @user.can_edit?(review.notebook))
                ==image_tag("Lock.png", class: "tagLogoLock tooltips show-inline", title: "This notebook is private", aria: {"hidden": true}, style:"display: none", tabindex: "0")
                span.sr-only
                  ' Private Notebook
              a.review-page-title href="#{notebook_path(row.notebook)}" title="#{row.notebook.title}"
                ==render partial: GalleryConfig.slim.table_notebook_title_text_only, locals: { notebook: row.notebook }
            -if revisions_found
              td
                -if row.revision_id != nil
                  -if row.recent?
                    | Current
                  -else
                    ==render partial: 'link', locals: { revision: row.revision }
            -technical_review = nil
            -functional_review = nil
            -compliance_review = nil
            -if row.revtype == "technical"
              -technical_review = row
              -indexed_array[index] = true
              -sorted_array.each_with_index do |review_other, index_inner|
                -if review_other.notebook.title == row.notebook.title && (row.revision_id == nil || row.revision_id == review_other.revision_id)
                  -if review_other.revtype == "functional"
                    -indexed_array[index_inner] = true;
                    -functional_review = review_other
                  -elsif review_other.revtype == "compliance"
                    -indexed_array[index_inner] = true
                    -compliance_review = review_other
                  -if technical_review && compliance_review
                    -break
            -elsif row.revtype == "functional"
              -functional_review = row
              -indexed_array[index] = true
              -sorted_array.each_with_index do |review_other, index_inner|
                -if review_other.notebook.title == row.notebook.title && (row.revision_id == nil || row.revision_id == review_other.revision_id)
                  -if review_other.revtype == "technical"
                    -indexed_array[index_inner] = true
                    -technical_review = review_other
                  -elsif review_other.revtype == "compliance"
                    -indexed_array[index_inner] = true
                    -compliance_review = review_other
                  -if technical_review && compliance_review
                    -break
            -elsif row.revtype == "compliance"
              -compliance_review = row
              -indexed_array[index] = true
              -sorted_array.each_with_index do |review_other, index_inner|
                -if review_other.notebook.title == row.notebook.title && (row.revision_id == nil || row.revision_id == review_other.revision_id)
                  -if review_other.revtype == "technical"
                    -indexed_array[index_inner] = true
                    -technical_review = review_other
                  -elsif review_other.revtype == "functional"
                    -indexed_array[index_inner] = true
                    -functional_review = review_other
                  -if technical_review && functional_review
                    -break
            -if GalleryConfig.reviews.technical.enabled
              -if technical_review
                td
                  -if technical_review.status != "queued"
                    -if technical_review.reviewer == nil || technical_review.reviewer.id == nil
                      -reviewer_name = "Unknown"
                    -else
                      -reviewer_name = technical_review.reviewer.name
                    -tooltip = "<strong>Status:</strong> #{technical_review.status.capitalize}<br/><strong>Date:</strong> #{technical_review.updated_at.strftime('%A, %B %d, %Y %H:%M UTC')}<br/><strong>By:</strong> #{reviewer_name}"
                    -aria_label = "#{GalleryConfig.reviews.technical.label.capitalize} Review Status: #{technical_review.status.capitalize}. Date: #{technical_review.updated_at.strftime('%A, %B %d, %Y %H:%M UTC')}. By: #{reviewer_name}"
                  -else
                    -tooltip = "<strong>Status:</strong> Queued<br/><strong>Date:</strong> #{technical_review.updated_at.strftime('%A, %B %d, %Y %H:%M UTC')}<br/><strong>Source:</strong> #{technical_review.comments}"
                    -aria_label = "Status: Queued. Date: #{technical_review.updated_at.strftime('%A, %B %d, %Y %H:%M UTC')}. Source: #{technical_review.comments}"
                  a.tooltip-right href="#{review_path(technical_review)}" title="#{tooltip}" aria-label="#{aria_label}"
                    ==technical_review.status
              -else
                td
            -if GalleryConfig.reviews.functional.enabled
              -if functional_review
                td
                  -if functional_review.status != "queued"
                    -if functional_review.reviewer == nil || functional_review.reviewer.id == nil
                      -reviewer_name = "Unknown"
                    -else
                      -reviewer_name = functional_review.reviewer.name
                    -tooltip = "<strong>Status:</strong> #{functional_review.status.capitalize}<br/><strong>Date:</strong> #{functional_review.updated_at.strftime('%A, %B %d, %Y %H:%M UTC')}<br/><strong>By:</strong> #{reviewer_name}"
                    -aria_label = "#{GalleryConfig.reviews.functional.label.capitalize} Review Status: #{functional_review.status.capitalize}. Date: #{functional_review.updated_at.strftime('%A, %B %d, %Y %H:%M UTC')}. By: #{reviewer_name}"
                  -else
                    -tooltip = "<strong>Status:</strong> Queued<br/><strong>Date:</strong> #{functional_review.updated_at.strftime('%A, %B %d, %Y %H:%M UTC')}<br/><strong>Source:</strong> #{functional_review.comments}"
                    -aria_label = "Status: Queued. Date: #{functional_review.updated_at.strftime('%A, %B %d, %Y %H:%M UTC')}. Source: #{functional_review.comments}"
                  a.tooltip-right href="#{review_path(functional_review)}" title="#{tooltip}" aria-label="#{aria_label}"
                    ==functional_review.status
              -else
                td
            -if GalleryConfig.reviews.compliance.enabled
              -if compliance_review
                td
                  -if compliance_review.status != "queued"
                    -if compliance_review.reviewer == nil || compliance_review.reviewer.id == nil
                      -reviewer_name = "Unknown"
                    -else
                      -reviewer_name = compliance_review.reviewer.name
                    -tooltip = "<strong>Status:</strong> #{compliance_review.status.capitalize}<br/><strong>Date:</strong> #{compliance_review.updated_at.strftime('%A, %B %d, %Y %H:%M UTC')}<br/><strong>By:</strong> #{reviewer_name}"
                    -aria_label = "#{GalleryConfig.reviews.compliance.label.capitalize} Review Status: #{compliance_review.status.capitalize}. Date: #{compliance_review.updated_at.strftime('%A, %B %d, %Y %H:%M UTC')}. By: #{reviewer_name}"
                  -else
                    -tooltip = "<strong>Status:</strong> Queued<br/><strong>Date:</strong> #{compliance_review.updated_at.strftime('%A, %B %d, %Y %H:%M UTC')}<br/><strong>Source:</strong> #{compliance_review.comments}"
                    -aria_label = "Status: Queued. Date: #{compliance_review.updated_at.strftime('%A, %B %d, %Y %H:%M UTC')}. Source: #{compliance_review.comments}"
                  a.tooltip-right href="#{review_path(compliance_review)}" title="#{tooltip}" aria-label="#{aria_label}"
                    ==compliance_review.status
              -else
                td
            td data-sort="#{row.updated_at}" ==render partial: "time_ago", locals: {time: row.updated_at}
            -if row.comments.to_s[0..22] == "Automatically nominated"
              td.tooltips tabindex="0" title="#{row.comments}"
                span aria-hidden="true" Automatically nominated
                span.sr-only ==row.comments
            -elsif row.comments == nil || row.comments.length < 2
              td.tooltips.none-cell
                span aria-hidden="true" #{"("}
                | none
                span aria-hidden="true" #{")"}
            -elsif row.comments.length > 100
              td.tooltips tabindex="0" title="#{row.comments}"
                span.show aria-hidden="true" style="display: none" ==truncate(row.comments, length: 100)
                span.sr-only ==row.comments
            -else
              td
                span ==row.comments
