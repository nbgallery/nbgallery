css:
  p, ol, li {
    margin: .2px 0;
  }
  i {
    font-size: 80%;
  }
  ol {
      margin-left: 40px;
      padding-left: 0;
  }
  li {
      margin-left: 47px;
  }
  h3,
  .sub-footer {
      border-top: 2px solid #ccc;
      margin-top: 10px;
      padding-top: 10px;
  }
  .sub-tab1 {
      margin-left: 25px !important;
  }
  .sub-tab2 {
      margin-left: 0;
  }
  .tab2 {
      margin-left: 70px;
  }

h2 Your NBGallery Subscriptions

-if @total_updates < 1
  p There has been no updates to any of your subscribed groups, users, tags, or notebooks in the last 24 hours/business day.

-if @total_group_updates > 0
  h3 Groups
  /* Groups updated */
  -if @updated_groups.length > 0
    h4 Groups Updated
    ol
      -@updated_groups.each_with_index do |group,index|
        li.sub-tab1
          strong
            a href="#{group_url(group)}"
              ==group.name
          |  - name, landing page, or description changed at #{group.updated_at.strftime("%H:%M UTC")}
          -if Time.now.strftime("%A") == "Monday"
            |  (#{group.updated_at.strftime("%A, %B %d")})
          | .
          p.tab1
            ' landing page =
            -if group.landing_id == nil
              | (none)
            -else
              -if @email_needs_to_be_simplified
                a href="#{notebook_url(Notebook.find(group.landing_id)).gsub(/notebooks\/(\d+)\-.*/,"notebooks\/\\1")}" Notebook
              -else
                a href="#{notebook_url(Notebook.find(group.landing_id))}"
                  ==Notebook.find(group.landing_id).title

  /* New Notebooks (belonging to group) */
  -if @new_group_notebooks.length > 0
    h4 New Notebooks (belonging to group)
    ol
      -@new_group_notebooks.each_with_index do |notebook,index|
        -if (index == 0 || @new_group_notebooks[index].owner_id != @new_group_notebooks[index-1].owner_id)
          strong.sub-tab2
            a href="#{group_url(Group.find(notebook.owner_id))}"
              ==Group.find(notebook.owner_id).name
        li
          -if @email_needs_to_be_simplified
            a href="#{notebook_url(notebook).gsub(/notebooks\/(\d+)\-.*/,"notebooks\/\\1")}" Notebook
          -else
            a href="#{notebook_url(notebook)}"
              ==notebook.title
          -creator = User.find(notebook.creator_id)
          '  - newly created by
          a href="#{user_url(creator)}"
            | #{creator.first_name} #{creator.last_name}
            -if !creator.org.blank?
              |  (#{creator.org})
          |  at #{notebook.created_at.strftime("%H:%M UTC")}
          -if Time.now.strftime("%A") == "Monday"
            |  (#{notebook.created_at.strftime("%A, %B %d")})
          | .

  /* Notebooks updated (belonging to group) */
  -if @updated_group_notebooks.length > 0
    h4 Notebooks Updated (belonging to group)
    ol
      -@updated_group_notebooks.each_with_index do |notebook,index|
        -if (index == 0 || @updated_group_notebooks[index].owner_id != @updated_group_notebooks[index-1].owner_id)
          strong.sub-tab2
            a href="#{group_url(Group.find(notebook.owner_id))}"
              ==Group.find(notebook.owner_id).name
        li
          -if @email_needs_to_be_simplified
            a href="#{notebook_url(notebook).gsub(/notebooks\/(\d+)\-.*/,"notebooks\/\\1")}" Notebook
          -else
            a href="#{notebook_url(notebook)}"
              ==notebook.title
          -editor = User.find(notebook.updater_id)
          '  - updated last by
          a href="#{user_url(editor)}"
            | #{editor.first_name} #{editor.last_name}
            -if !editor.org.blank?
              |  (#{editor.org})
          |  at #{notebook.updated_at.strftime("%H:%M UTC")}
          -if Time.now.strftime("%A") == "Monday"
            |  (#{notebook.updated_at.strftime("%A, %B %d")})
          | .

  /* Notebook reviews updates (belonging to group) */
  -if @group_review_updates.length > 0
    h4 Notebook Reviews Updated (belonging to group)
    ol
      -@group_review_updates.each_with_index do |review,index|
        -if index == 0 || @group_review_index[index] != @group_review_index[index-1]
          strong.sub-tab2
            -group = Group.find(@group_review_index[index])
            a href="#{group_url(group)}"
              ==group.name
        -if (index == 0 || @group_review_updates[index].notebook_id != @group_review_updates[index-1].notebook_id)
          p.sub-tab1
            -if @email_needs_to_be_simplified
              a href="#{notebook_url(Notebook.find(review.notebook_id)).gsub(/notebooks\/(\d+)\-.*/,"notebooks\/\\1")}" Notebook
            -else
              a href="#{notebook_url(Notebook.find(review.notebook_id))}"
                ==Notebook.find(review.notebook_id).title
        li.tab2
          -if review.revtype == "technical"
            | "#{GalleryConfig.reviews.technical.label.capitalize} Review
          -elsif review.revtype == "functional"
            | "#{GalleryConfig.reviews.functional.label.capitalize} Review
          -elsif review.revtype == "compliance"
            | "#{GalleryConfig.reviews.compliance.label.capitalize} Review
          -else
            | "Unknown Review
          -if review.status == "queued"
            | : queued" - was queued/nominated for review or the review was unclaimed by a user at #{review.updated_at.strftime("%H:%M UTC")}
            -if Time.now.strftime("%A") == "Monday"
              |  (#{review.updated_at.strftime("%A, %B %d")})
            | .
          -elsif review.status == "claimed"
            -editor = User.find(review.reviewer_id)
            ' : claimed" - was claimed by user
            a href="#{user_url(editor)}"
              | #{editor.first_name} #{editor.last_name}
              -if !editor.org.blank?
                |  (#{editor.org})
            |  at #{review.updated_at.strftime("%H:%M UTC")}
            -if Time.now.strftime("%A") == "Monday"
              |  (#{review.updated_at.strftime("%A, %B %d")})
            | .
          -elsif review.status == "completed"
            -editor = User.find(review.reviewer_id)
            ' : approved" - was approved and successfully vetted by
            a href="#{user_url(editor)}"
              | #{editor.first_name} #{editor.last_name}
              -if !editor.org.blank?
                |  (#{editor.org})
            |  at #{review.updated_at.strftime("%H:%M UTC")}.
          -else
            | : unknown status" - updated last at #{review.updated_at.strftime("%H:%M UTC")}
            -if Time.now.strftime("%A") == "Monday"
              |  (#{review.updated_at.strftime("%A, %B %d")})
            | .

  /* Notebook Comments (by group) */
  -if @comment_thread_group_updates.length > 0
    h4 Notebook Comments (by group)
    ol
      -previous_group = nil, group = nil
      -@comment_thread_group_updates.each_with_index do |comment,index|
        -previous_group = group
        -group = Group.where(id: Notebook.find(Commontator::Thread.find(comment.thread_id).commontable_id).owner_id).first
        -if index == 0 || group.id != previous_group.id
          strong.sub-tab2
            a href="#{group_url(group)}"
              ==group.name
        -if (index == 0 || @comment_thread_group_updates[index].thread_id != @comment_thread_group_updates[index-1].thread_id)
          p.sub-tab1
            -notebook_id = Commontator::Thread.find(comment.thread_id).commontable_id
            -if @email_needs_to_be_simplified
              a href="#{notebook_url(Notebook.find(notebook_id)).gsub(/notebooks\/(\d+)\-.*/,"notebooks\/\\1")}" Notebook
            -else
              a href="#{notebook_url(Notebook.find(notebook_id))}"
                ==Notebook.find(notebook_id).title
        li.tab2
          -if @email_needs_to_be_simplified
            ' A comment was left by the user at #{comment.updated_at.strftime("%H:%M UTC")}
          -else
            | "#{comment.body}" - was commented by the user at #{comment.updated_at.strftime("%H:%M UTC")}
          -if Time.now.strftime("%A") == "Monday"
            |  (#{comment.updated_at.strftime("%A, %B %d")})
          | .

-if @total_user_updates > 0
  h3 Users
  /* New Notebooks (by user) */
  -if @new_user_notebooks.length > 0
    h4 New Notebooks (by user)
    ol
      -@new_user_notebooks.each_with_index do |notebook,index|
        -if (index == 0 || @new_user_notebooks[index].updater_id != @new_user_notebooks[index-1].updater_id)
          strong.sub-tab2
            -creator = User.find(notebook.creator_id)
            a href="#{user_url(creator)}"
              | #{creator.first_name} #{creator.last_name}
              -if !creator.org.blank?
                |  (#{creator.org})
        li
          -if @email_needs_to_be_simplified
            a href="#{notebook_url(notebook).gsub(/notebooks\/(\d+)\-.*/,"notebooks\/\\1")}" Notebook
          -else
            a href="#{notebook_url(notebook)}"
              ==notebook.title
          |  - newly created by user at #{notebook.updated_at.strftime("%H:%M UTC")}
          -if Time.now.strftime("%A") == "Monday"
            |  (#{notebook.updated_at.strftime("%A, %B %d")})
          | .

  /* Notebooks Updated (by user) */
  -if @updated_user_notebooks.length > 0
    h4 Notebooks Updated (by user)
    ol
      -@updated_user_notebooks.each_with_index do |notebook,index|
        -if (index == 0 || @updated_user_notebooks[index].updater_id != @updated_user_notebooks[index-1].updater_id)
          strong.sub-tab2
            -editor = User.find(notebook.updater_id)
            a href="#{user_url(editor)}"
              | #{editor.first_name} #{editor.last_name}
              -if !editor.org.blank?
                |  (#{editor.org})
        li
          -if @email_needs_to_be_simplified
            a href="#{notebook_url(notebook).gsub(/notebooks\/(\d+)\-.*/,"notebooks\/\\1")}" Notebook
          -else
            a href="#{notebook_url(notebook)}"
              ==notebook.title
          |  - updated last by user at #{notebook.updated_at.strftime("%H:%M UTC")}
          -if Time.now.strftime("%A") == "Monday"
            |  (#{notebook.updated_at.strftime("%A, %B %d")})
          | .

  /* Notebook Reviews Updated (by user) */
  -if @user_review_updates.length > 0
    h4 Notebook Reviews Updated (by user)
    ol
      -@user_review_updates.each_with_index do |review,index|
        -if index == 0 || @user_review_index[index] != @user_review_index[index-1]
          -user = User.find(@user_review_index[index])
          strong.sub-tab2
            a href="#{user_url(user)}"
              | #{user.first_name} #{user.last_name}
              -if !user.org.blank?
                |  (#{user.org})
        -if (index == 0 || @user_review_updates[index].notebook_id != @user_review_updates[index-1].notebook_id)
          p.sub-tab1
            -if @email_needs_to_be_simplified
              a href="#{notebook_url(Notebook.find(review.notebook_id)).gsub(/notebooks\/(\d+)\-.*/,"notebooks\/\\1")}" Notebook
            -else
              a href="#{notebook_url(Notebook.find(review.notebook_id))}"
                ==Notebook.find(review.notebook_id).title
        li.tab2
          -if review.revtype == "technical"
            | "#{GalleryConfig.reviews.technical.label.capitalize} Review
          -elsif review.revtype == "functional"
            | "#{GalleryConfig.reviews.functional.label.capitalize} Review
          -elsif review.revtype == "compliance"
            | "#{GalleryConfig.reviews.compliance.label.capitalize} Review
          -else
            | "Unknown Review
          -if review.status == "queued"
            | : queued" - was queued/nominated for review or the review was unclaimed by user at #{review.updated_at.strftime("%H:%M UTC")}
            -if Time.now.strftime("%A") == "Monday"
              |  (#{review.updated_at.strftime("%A, %B %d")})
            | .
          -elsif review.status == "claimed"
            -editor = User.find(review.reviewer_id)
            ' : claimed" - was claimed by user
            a href="#{user_url(editor)}"
              | #{editor.first_name} #{editor.last_name}
              -if !editor.org.blank?
                |  (#{editor.org})
            |  at #{review.updated_at.strftime("%H:%M UTC")}
            -if Time.now.strftime("%A") == "Monday"
              |  (#{review.updated_at.strftime("%A, %B %d")})
            | .
          -elsif review.status == "completed"
            -editor = User.find(review.reviewer_id)
            ' : approved" - was approved and successfully vetted by
            a href="#{user_url(editor)}"
              | #{editor.first_name} #{editor.last_name}
              -if !editor.org.blank?
                |  (#{editor.org})
            |  at #{review.updated_at.strftime("%H:%M UTC")}
            -if Time.now.strftime("%A") == "Monday"
              |  (#{review.updated_at.strftime("%A, %B %d")})
            | .
          -else
            | : unknown status" - updated last at #{review.updated_at.strftime("%H:%M UTC")}
            -if Time.now.strftime("%A") == "Monday"
              |  (#{review.updated_at.strftime("%A, %B %d")})
            | .

  /* Notebook Comments (by user) */
  -if @comment_thread_user_updates.length > 0
    h4 Notebook Comments (by user)
    ol
      -@comment_thread_user_updates.each_with_index do |comment,index|
        -if index == 0 || @comment_thread_user_updates[index].creator_id != @comment_thread_user_updates[index-1].creator_id
          strong.sub-tab2
            -editor = User.find(@comment_thread_user_updates[index].creator_id)
            a href="#{user_url(editor)}"
              | #{editor.first_name} #{editor.last_name}
              -if !editor.org.blank?
                |  (#{editor.org})
        -if (index == 0 || @comment_thread_user_updates[index].thread_id != @comment_thread_user_updates[index-1].thread_id)
          p.sub-tab1
            -notebook_id = Commontator::Thread.find(comment.thread_id).commontable_id
            -if @email_needs_to_be_simplified
              a href="#{notebook_url(Notebook.find(notebook_id)).gsub(/notebooks\/(\d+)\-.*/,"notebooks\/\\1")}" Notebook
            -else
              a href="#{notebook_url(Notebook.find(notebook_id))}"
                ==Notebook.find(notebook_id).title
        li.tab2
          -if @email_needs_to_be_simplified
            | A comment was left by the user at #{comment.updated_at.strftime("%H:%M UTC")}
          -else
            | "#{comment.body}" - was commented by the user at #{comment.updated_at.strftime("%H:%M UTC")}
          -if Time.now.strftime("%A") == "Monday"
            |  (#{comment.updated_at.strftime("%A, %B %d")})
          | .

-if @total_tag_updates > 0
  h3 Tags
  /* New Notebooks (with tag) */
  -if @new_tag_notebooks.length > 0
    h4 New Notebooks (with tag)
    -ctr = 1
    ol
      -@new_tag_notebooks.each_with_index do |notebook,index|
        -if (index == 0 || @new_tag_index[index] != @new_tag_index[index-1])
          strong.sub-tab2
            | "
            a href="#{tag_url(Tag.where(:tag => @new_tag_index[index]).first.tag_text)}"
              ==@new_tag_index[index]
            | "
        li
          -if @email_needs_to_be_simplified
            a href="#{notebook_url(notebook).gsub(/notebooks\/(\d+)\-.*/,"notebooks\/\\1")}" Notebook
          -else
            a href="#{notebook_url(notebook)}"
              ==notebook.title
          -creator = User.find(notebook.creator_id)
          '  - newly created with tag by
          a href="#{user_url(creator)}"
            | #{creator.first_name} #{creator.last_name}
            -if !creator.org.blank?
              |  (#{creator.org})
          |  at #{notebook.created_at.strftime("%H:%M UTC")}
          -if Time.now.strftime("%A") == "Monday"
            |  (#{notebook.created_at.strftime("%A, %B %d")})
          | .

  /* Tags Added to Notebooks */
  -if @newly_added_tags.length > 0
    h4 Tags Added to Notebooks
    -ctr = 1
    ol
      -@newly_added_tags = @newly_added_tags.sort_by &:tag_text
      -@newly_added_tags.each_with_index do |tag,index|
        -if (index == 0 || @newly_added_tags[index].tag_text != @newly_added_tags[index-1].tag_text)
          strong.sub-tab2
            | "
            a href="#{tag_url(tag)}"
              ==tag.tag_text
            | "
        li
          -if @email_needs_to_be_simplified
            a href="#{notebook_url(Notebook.find(tag.notebook_id)).gsub(/notebooks\/(\d+)\-.*/,"notebooks\/\\1")}" Notebook
          -else
            a href="#{notebook_url(Notebook.find(tag.notebook_id))}"
              ==(Notebook.find(tag.notebook_id)).title
          -editor = User.find(tag.user_id)
          '  - tag added by
          a href="#{user_url(editor)}"
            | #{editor.first_name} #{editor.last_name}
            -if !editor.org.blank?
              |  (#{editor.org})
          |  at #{tag.created_at.strftime("%H:%M UTC")}
          -if Time.now.strftime("%A") == "Monday"
            |  (#{tag.created_at.strftime("%A, %B %d")})
          | .

  /* Notebooks updated (with tag) */
  -if @updated_tag_notebooks.length > 0
    h4 Notebooks Updated (with tag)
    -ctr = 1
    ol
      -@updated_tag_notebooks.each_with_index do |notebook,index|
        -if (index == 0 || @tag_text_index[index] != @tag_text_index[index-1])
          strong.sub-tab2
            | "
            a href="#{tag_url(Tag.where(:tag => @tag_text_index[index]).first)}"
              ==@tag_text_index[index]
            | "
        li
          -if @email_needs_to_be_simplified
            a href="#{notebook_url(notebook).gsub(/notebooks\/(\d+)\-.*/,"notebooks\/\\1")}" Notebook
          -else
            a href="#{notebook_url(notebook)}"
              ==notebook.title
          -editor = User.find(notebook.updater_id)
          '  - updated last by
          a href="#{user_url(editor)}"
            | #{editor.first_name} #{editor.last_name}
            -if !editor.org.blank?
              |  (#{editor.org})
          |  at #{notebook.updated_at.strftime("%H:%M UTC")}
          -if Time.now.strftime("%A") == "Monday"
            |  (#{notebook.updated_at.strftime("%A, %B %d")})
          | .

  /* Notebook Reviews Updated (with tag) */
  -if @tag_review_updates.length > 0
    h4 Notebook Reviews Updated (with tag)
    ol
      -@tag_review_updates.each_with_index do |review,index|
        -if index == 0 || @tag_review_index[index] != @tag_review_index[index-1]
          -tag = Tag.find(@tag_review_index[index]).tag
          strong.sub-tab2
            | "
            a href="#{tag_url(tag)}"
              ==tag
            | "
          -ctr = 1
        -if (index == 0 || @tag_review_updates[index].notebook_id != @tag_review_updates[index-1].notebook_id)
          p.sub-tab1
            -if @email_needs_to_be_simplified
              a href="#{notebook_url(Notebook.find(review.notebook_id)).gsub(/notebooks\/(\d+)\-.*/,"notebooks\/\\1")}" Notebook
            -else
              a href="#{notebook_url(Notebook.find(review.notebook_id))}"
                ==Notebook.find(review.notebook_id).title
        li.tab2
          -if review.revtype == "technical"
            | "#{GalleryConfig.reviews.technical.label.capitalize} Review
          -elsif review.revtype == "functional"
            | "#{GalleryConfig.reviews.functional.label.capitalize} Review
          -elsif review.revtype == "compliance"
            | "#{GalleryConfig.reviews.compliance.label.capitalize} Review
          -else
            | "Unknown Review
          -if review.status == "queued"
            | : queued" - was queued/nominated for review or the review was unclaimed by a user at #{review.updated_at.strftime("%H:%M UTC")}
            -if Time.now.strftime("%A") == "Monday"
              |  (#{review.updated_at.strftime("%A, %B %d")})
            | .
          -elsif review.status == "claimed"
            -editor = User.find(review.reviewer_id)
            ' : claimed" - was claimed by user
            a href="#{user_url(editor)}"
              | #{editor.first_name} #{editor.last_name}
              -if !editor.org.blank?
                |  (#{editor.org})
            |  at #{review.updated_at.strftime("%H:%M UTC")}
            -if Time.now.strftime("%A") == "Monday"
              |  (#{review.updated_at.strftime("%A, %B %d")})
            | .
          -elsif review.status == "completed"
            -editor = User.find(review.reviewer_id)
            ' : approved" - was approved and successfully vetted by
            a href="#{user_url(editor)}"
              | #{editor.first_name} #{editor.last_name}
              -if !editor.org.blank?
                |  (#{editor.org})
            |  at #{review.updated_at.strftime("%H:%M UTC")}
            -if Time.now.strftime("%A") == "Monday"
              |  (#{review.updated_at.strftime("%A, %B %d")})
            | .
          -else
            | : unknown status" - updated last at #{review.updated_at.strftime("%H:%M UTC")}
            -if Time.now.strftime("%A") == "Monday"
              |  (#{review.updated_at.strftime("%A, %B %d")})
            | .

-if @total_notebook_updates > 0
  h3 Notebooks
  /* New Notebooks */
  -if @new_notebooks.length > 0
    h4 New Notebooks
    ol
      -@new_notebooks.each do |notebook|
        li.sub-tab1
          | "
          strong
            -if @email_needs_to_be_simplified
              a href="#{notebook_url(notebook).gsub(/notebooks\/(\d+)\-.*/,"notebooks\/\\1")}" Notebook
            -else
              a href="#{notebook_url(notebook)}"
                ==notebook.title
          -creator = User.find(notebook.creator_id)
          ' " - newly created by
          a href="#{user_url(creator)}"
            | #{creator.first_name} #{creator.last_name}
            -if !creator.org.blank?
              |  (#{creator.org})
          |  at #{notebook.created_at.strftime("%H:%M UTC")}
          -if Time.now.strftime("%A") == "Monday"
            |  (#{notebook.created_at.strftime("%A, %B %d")})
          | .
          p.tab1
            | language = #{notebook.lang} (#{notebook.lang_version})
          p.tab1
            ' tags =
            -if Tag.where(:notebook_id => notebook.id).count > 1
              -Tag.where(:notebook_id => notebook.id).each_with_index do |element,index|
                -if index == 0
                  | "
                  ==element.tag
                  | "
                -else
                  | , "
                  ==element.tag
                  | "
            -elsif Tag.where(:notebook_id => notebook.id).count == 1
              ==Tag.where(:notebook_id => notebook.id).first().tag
            -else
              | (none)

  /* Notebooks updated */
  -if @updated_notebooks.length > 0
    h4 Notebooks Updated
    ol
      -@updated_notebooks.each do |notebook|
        li.sub-tab1
          strong
            -if @email_needs_to_be_simplified
              a href="#{notebook_url(notebook).gsub(/notebooks\/(\d+)\-.*/,"notebooks\/\\1")}" Notebook
            -else
              a href="#{notebook_url(notebook)}"
                ==notebook.title
          -editor = User.find(notebook.updater_id)
          '  - updated last by
          a href="#{user_url(editor)}"
            | #{editor.first_name} #{editor.last_name}
            -if !editor.org.blank?
              |  (#{editor.org})
          |  at #{notebook.updated_at.strftime("%H:%M UTC")}
          -if Time.now.strftime("%A") == "Monday"
            |  (#{notebook.updated_at.strftime("%A, %B %d")})
          | .

  /* Notebook Reviews Updated */
  -if @notebook_review_updates.length > 0
    h4 Notebook Reviews Updated
    ol
      -@notebook_review_updates.each_with_index do |review,index|
        -if (index == 0 || @notebook_review_updates[index].notebook_id != @notebook_review_updates[index-1].notebook_id)
          strong.sub-tab2
            -if @email_needs_to_be_simplified
              a href="#{notebook_url(Notebook.find(review.notebook_id)).gsub(/notebooks\/(\d+)\-.*/,"notebooks\/\\1")}" Notebook
            -else
              a href="#{notebook_url(Notebook.find(review.notebook_id))}"
                ==Notebook.find(review.notebook_id).title
        li.tab1
          -if review.revtype == "technical"
            | "#{GalleryConfig.reviews.technical.label.capitalize} Review
          -elsif review.revtype == "functional"
            | "#{GalleryConfig.reviews.functional.label.capitalize} Review
          -elsif review.revtype == "compliance"
            | "#{GalleryConfig.reviews.compliance.label.capitalize} Review
          -else
            | "Unknown Review
          -if review.status == "queued"
            | : queued" - was queued/nominated for review or the review was unclaimed by a user at #{review.updated_at.strftime("%H:%M UTC")}
            -if Time.now.strftime("%A") == "Monday"
              |  (#{review.updated_at.strftime("%A, %B %d")})
            | .
          -elsif review.status == "claimed"
            -editor = User.find(review.reviewer_id)
            ' : claimed" - was claimed by user
            a href="#{user_url(editor)}"
              | #{editor.first_name} #{editor.last_name}
              -if !editor.org.blank?
                |  (#{editor.org})
            |  at #{review.updated_at.strftime("%H:%M UTC")}
            -if Time.now.strftime("%A") == "Monday"
              |  (#{review.updated_at.strftime("%A, %B %d")})
            | .
          -elsif review.status == "completed"
            -editor = User.find(review.reviewer_id)
            ' : approved" - was approved and successfully vetted by
            a href="#{user_url(editor)}"
              | #{editor.first_name} #{editor.last_name}
              -if !editor.org.blank?
                |  (#{editor.org})
            |  at #{review.updated_at.strftime("%H:%M UTC")}
            -if Time.now.strftime("%A") == "Monday"
              |  (#{review.updated_at.strftime("%A, %B %d")})
            | .
          -else
            | : unknown status" - updated last at #{review.updated_at.strftime("%H:%M UTC")}
            -if Time.now.strftime("%A") == "Monday"
              |  (#{review.updated_at.strftime("%A, %B %d")})
            | .

  /* Notebook comments */
  -if @comment_thread_notebook_updates.length > 0
    h4 Notebook Comments
    ol
      -@comment_thread_notebook_updates.each_with_index do |comment,index|
        -if (index == 0 || @comment_thread_notebook_updates[index].thread_id != @comment_thread_notebook_updates[index-1].thread_id)
          strong.sub-tab2
            -notebook_id = Commontator::Thread.find(comment.thread_id).commontable_id
            -if @email_needs_to_be_simplified
              a href="#{notebook_url(Notebook.find(notebook_id)).gsub(/notebooks\/(\d+)\-.*/,"notebooks\/\\1")}" Notebook
            -else
              a href="#{notebook_url(Notebook.find(notebook_id))}"
                ==Notebook.find(notebook_id).title
        li.tab1
          -editor = User.find(@comment_thread_notebook_updates[index].creator_id)
          -if @email_needs_to_be_simplified
            ' A comment was left by
          -else
            ' "#{comment.body}" - was commented by
          a href="#{user_url(editor)}"
            | #{editor.first_name} #{editor.last_name}
            -if !editor.org.blank?
              |  (#{editor.org})
          |   at #{comment.updated_at.strftime("%H:%M UTC")}
          -if Time.now.strftime("%A") == "Monday"
            |  (#{comment.updated_at.strftime("%A, %B %d")})
          | .

div.sub-footer
  p.center
    a href="#{subscriptions_url}" Manage your Subscriptions
